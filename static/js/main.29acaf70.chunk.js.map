{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Gleet.js","components/GleetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","sotrageService","storage","AuthFrom","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","AuthForm","faGoogle","faGithub","Gleet","gleetObj","isOwner","editing","setEditing","text","newGleet","setNewGleet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","faTrash","faPencilAlt","GleetFactory","userObj","gleet","setGleet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","gleets","setGleets","useEffect","onSnapshot","snapshot","gleetArray","docs","map","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","placeholde","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29acaf70.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\"\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_APP_ID,\n  };\n\n  firebase.initializeApp(firebaseConfig);\n\n  export const firebaseInstance = firebase;\n\n  export const authService = firebase.auth();\n  export const dbService = firebase.firestore();\n  export const sotrageService = firebase.storage();","import { authService } from \"fbase\";\nimport React, {useState} from \"react\";\n\nconst AuthFrom = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n     \n    const onChange = (event) => {\n        const {target: {name, value}} = event;\n        if (name === \"email\"){\n            setEmail(value)\n        } else if (name === \"password\"){\n            setPassword(value)\n        }\n    }\n    const onSubmit = async(event) => {\n        event.preventDefault(); // 이거 안하면, 로그인버튼 누를때마다 새로고침되고, email password에 적용한 리액트기능이 다 사라진다\n        //preventDefault() : 기본행위가 실행되는것 막기\n        try {\n            let data\n           if(newAccount){\n               data = await authService.createUserWithEmailAndPassword(\n                   email, password\n               );\n           } else {\n               data = await authService.signInWithEmailAndPassword(\n                   email, password\n               );\n           }\n           console.log(data)\n        } catch(error) {\n           setError(error.message)\n        }\n    };\n    const toogleAccount = () => setNewAccount(prev => !prev);\n    return (\n    <>\n        <form onSubmit={onSubmit} className=\"container\">\n            <input name=\"email\" \n                type=\"email\" \n                placeholder=\"Email\" \n                required \n                value={email} \n                onChange={onChange}\n                className=\"authInput\"\n            />\n            <input name=\"password\" \n                type=\"password\" \n                placeholder=\"Password\" \n                required \n                value={password} \n                onChange={onChange}\n                className=\"authInput\"\n            />\n            <input type=\"submit\"\n                className=\"authInput authSubmit\"\n                value={newAccount ? \"Create Account\" : \"Sign in\"}\n            />\n            {error && <span className=\"authError\">{error}</span>}\n        </form>\n            <span onClick={toogleAccount} className=\"authSwitch\">\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n            </span>\n    </>\n    )\n}\n\nexport default AuthFrom;","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport AuthForm from \"components/AuthForm\"\n\n const Auth = () => {\n     const onSocialClick = async (event) => {\n        const {target:{name}} = event;\n        let provider; //social login 을 위한 장치 반드시 필요\n        if(name === \"google\") {\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === \"github\") {\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        const data = await authService.signInWithPopup(provider);\n     };\n     return (\n        <div className=\"authContainer\">\n        <FontAwesomeIcon\n          icon={faTwitter}\n          color={\"#04AAFF\"}\n          size=\"3x\"\n          style={{ marginBottom: 30 }}\n        />\n            <AuthForm />\n            <div className=\"authBtns\">\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n                    Continue with Github <FontAwesomeIcon icon={faGithub} />\n                </button>\n            </div>\n        </div>\n     )\n }\n export default Auth;\n//  자동으로 import 되도록하고싶을때 위에처럼\n\n\n// 원래는 밑에꺼였음\n//export default () => <span>Auth</span>;","import { useState } from \"react\";\nimport { dbService, sotrageService } from \"fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Gleet = ({gleetObj, isOwner}) => {\n    const  [editing, setEditing] = useState(false); //edit mode 변경을 위해서\n    const  [newGleet, setNewGleet] = useState(gleetObj.text); //edit input에 넣는걸 onChange반영하기 위해서\n     \n    const  onDeleteClick = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this gleet?\");\n        if (ok) {\n            await dbService.doc(`gleets/${gleetObj.id}`).delete(); //firebase\n            //doc 의 id를 알고있기 때문에 가능했지. 이건 home에서 보내준 gleetObj덕분이고\n            //gleets collection에서 id로 document를 찾아온거 / firebase callection 보면 확인가능\n            await sotrageService.refFromURL(gleetObj.attachmentUrl).delete(); // 사진도 storage에서 지우기\n        }\n    }\n\n    const toggleEditing = () => setEditing((prev) => !prev);\n    //전에 값을 받아서 반대로 바꿔서 저장\n    //편집모드로 들어가게할 때 이렇게 쓰면 좋겠다. useState로 true false 바꾸면서\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.doc(`gleets/${gleetObj.id}`).update({\n            text: newGleet,\n        });\n        setEditing(false)\n    };\n    const onChange = (event) => {\n        const {target:{value},} = event;\n        setNewGleet(value);\n        //이거해야 새로 작성하는 수정하기 글이 보이지\n    }\n\n    return (\n        <div className=\"gleet\">\n          {editing ? (\n            <>\n              <form onSubmit={onSubmit} className=\"container gleetEdit\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Edit your nweet\"\n                  value={newGleet}\n                  required\n                  autoFocus\n                  onChange={onChange}\n                  className=\"formInput\"\n                />\n                <input type=\"submit\" value=\"Update Gleet\" className=\"formBtn\" />\n              </form>\n              <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                Cancel\n              </span>\n            </>\n          ) : (\n            <>\n              <h4>{gleetObj.text}</h4>\n              {gleetObj.attachmentUrl && <img src={gleetObj.attachmentUrl} />}\n              {isOwner && (\n                <div className=\"gleet__actions\">\n                  <span onClick={onDeleteClick}>\n                    <FontAwesomeIcon icon={faTrash} />\n                  </span>\n                  <span onClick={toggleEditing}>\n                    <FontAwesomeIcon icon={faPencilAlt} />\n                  </span>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      );\n    };\n    \n    export default Gleet;","import React, { useState } from \"react\";\nimport { dbService, sotrageService } from \"fbase\";\nimport {v4 as uuidv4} from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst GleetFactory = ({userObj}) => {\n    const [gleet, setGleet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n    const onSubmit = async (event) => { //promise를 리턴하기 때문에 async 넣는다\n        if (gleet === \"\") {\n            return;\n          }\n        event.preventDefault(); //submit 클릭시 새로고침되는거 막으려고\n        let attachmentUrl = \"\";\n        if (attachment !== \"\"){\n            const attachmentRef = sotrageService\n                .ref()\n                .child(`${userObj.uid}/${uuidv4()}`); // 파일에 대한 레퍼런스 refFromURL 메소드로 storage에서 찾을 수도 있다\n            const response = await attachmentRef.putString(attachment, \"data_url\"); //readAsDataURL 했던게 data_url\n            attachmentUrl = await response.ref.getDownloadURL();\n        }\n        const gleetObj = {\n            text: gleet, // 이 gleet는 위에 setState의 gleet값\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        };\n        await dbService.collection(\"gleets\").add(gleetObj);\n        setGleet(\"\"); //submit 했으니 다시 비워주는 것\n        setAttachment(\"\");\n    };\n    const onChange = (event) => {\n        const { \n            target: {value},\n        } = event;\n        // event 안에있는 target 안에있는 value를 내놔라는것\n        setGleet(value);\n    };\n    const onFileChange = (event) => {\n        // console.log(event.target.files); // input이 가진 타겟에서 파일까지 접근\n        const {target:{ files },} = event; //이벤트안으로 가서 target에서 files가져와라 es6의 기능\n        const theFile = files[0]; // 파일만들고\n        const reader = new FileReader(); //파일리더기 만들고\n        reader.onloadend = (finishedEvent) => {\n            const {currentTarget:{result},} = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile); //파일리더기로 파일 읽고\n    };\n    const onClearAttachment = () => setAttachment(\"\"); //사진 미리보기 없애기\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input\n                className=\"factoryInput__input\"\n                value={gleet}\n                onChange={onChange}\n                type=\"text\"\n                placeholder=\"What's on your mind?\"\n                maxLength={120}\n                />\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n            </div>\n            <label for=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{\n                opacity: 0,\n                }}\n            />\n        {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                        src={attachment}\n                        style={{\n                        backgroundImage: attachment,\n                        }}\n                    />\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n                 )}\n        </form>\n    )}\n\nexport default GleetFactory;","import React, { useEffect, useState } from \"react\";\nimport { dbService, sotrageService } from \"fbase\";\nimport Gleet from \"components/Gleet\";\nimport GleetFactory from \"components/GleetFactory\";\n\nconst Home = ({ userObj }) => {\n    const [gleets, setGleets] = useState([]);\n    useEffect(() => {\n        dbService.collection(\"gleets\").onSnapshot(snapshot => { //.collection(\"gleets\").orderBy(\"createdAt\",\"desc\").onSnapshot(~~)\n        // snapshot : 데이터베이스에 무슨일이 있을 때 알림을 받음\n            const gleetArray = snapshot.docs.map(doc => ({\n                id: doc.id,\n                ...doc.data(),\n            }));\n            setGleets(gleetArray);\n        });\n    }, []);\n    return (\n    <div className=\"container\">\n       <GleetFactory userObj={userObj}/> \n        <div style={{ marginTop: 30 }}>\n            {gleets.map((gleet) => (\n                <Gleet\n                    key={gleet.id} \n                    gleetObj={gleet} //모든데이터\n                    isOwner={gleet.creatorId === userObj.uid} //userObj는 Router에서 Home으로 보낸 prop\n                />\n            ))}\n        </div>\n    </div>\n    )\n};\nexport default Home; ","import React, { useEffect, useState } from \"react\";\nimport { authService, dbService } from \"fbase\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default ({refreshUser, userObj}) => {\n    //데이터베이스를 필터링해서 여기서는 userObj.uid를 기준으로 저거랑 일치하는 것만 불러온것\n    // const getMyGleets = async () => { \n    //     const gleets = await dbService\n    //         .collection(\"gleets\")\n    //         .where(\"creatorId\", \"==\", userObj.uid)\n    //         .orderBy(\"createdAt\")//, \"desc\" 이걸 괄호안에 넣어서 내림차순 할 수 있지만 인덱스하나 더 만들어야함\n    //         .get();\n    //         console.log(gleets.docs.map(doc => doc.data()));\n    // };\n    // useEffect(() => {\n    //     getMyGleets();\n    // }, [])\n\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n    \n    const onChange = (event) => {\n        const {target : {value},} = event;\n        setNewDisplayName(value);\n    }\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName){\n            await userObj.updateProfile({\n                displayName: newDisplayName\n            });\n            refreshUser();//App에서 가져온 함수\n        }\n    };\n    return (\n    <div className=\"container\">\n        <form onSubmit={onSubmit} className=\"profileForm\">\n            <input \n                onChange={onChange}\n                type=\"text\"\n                autoFocus\n                placeholde=\"Display name\"\n                value={newDisplayName}\n                className=\"formInput\"\n            />\n            <input\n                type=\"submit\"\n                value=\"Update Profile\"\n                className=\"formBtn\"\n                style={{marginTop: 10,}}\n            />\n        </form>\n        <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n            Log Out\n        </span>\n    </div>\n    );\n};","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({userObj}) => <nav>\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n        <li>\n            <Link to=\"/\" style={{ marginRight: 10 }}>\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n            </Link>\n        </li>\n        <li>\n        <Link\n          to=\"/profile\"\n          style={{\n            marginLeft: 10,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            fontSize: 12,\n          }}\n        >\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n          <span style={{ marginTop: 10 }}>\n            {userObj.displayName\n              ? `${userObj.displayName}의 Profile`\n              : \"Profile\"}\n          </span>\n        </Link>\n        </li>\n    </ul>\n</nav>;\nexport default Navigation;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter =  ({ refreshUser, isLoggedIn, userObj }) => { //App.js의 return으로 가져온 props\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />} \n            {/*  && : <Navigation/>이 존재하려면 isLoggedIn이 true여야한다 는 의미 */}\n            <Switch>\n                {isLoggedIn ? (\n                <div\n                style={{\n                  maxWidth: 890,\n                  width: \"100%\",\n                  margin: \"0 auto\",\n                  marginTop: 80,\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n                >\n                    <Route exact path=\"/\">\n                        <Home userObj={userObj}/> {/* 로그인되어있으면 이쪽으로 */}\n                    </Route>\n                    <Route exact path=\"/profile\">\n                        <Profile userObj={userObj} refreshUser={refreshUser}/> \n                    </Route>\n                </div>\n             ) : (\n                <>\n                    <Route exact path=\"/\">\n                        <Auth /> {/* 로그인안되어있으면 이쪽으로*/}\n                    </Route>\n                </>\n                )}\n            </Switch>\n        </Router>\n    );\n};\n\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(()=> {\n    authService.onAuthStateChanged((user) => {\n      if(user) {\n        //firebase 에서 user 전체 가져오면 크니까 필요한 displayName 등 몇개만 가져와서 넣기\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        })\n      } else {\n        setUserObj(null)\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n    // Profile에서 .updateProfile을 해주면 변경이 생길거고\n    // 여기서 그걸 적용하면서 리랜더링 할거고 자동으로 업데이트 될거야\n    // 새로고침안해도 말이야\n    \n    // !! 상태변경하는 함수를 보내서 내려줘서 밑에서 변경할걸 위에서 바뀌게 하는거지\n  }\n  return (\n  <>\n    {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={ Boolean(userObj) } userObj={ userObj } />: \"Initializing...\"}\n    <footer className=\"footer\">@copy; {new Date().getFullYear()} Glitter By glen</footer>\n  </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}